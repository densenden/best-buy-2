{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Step 3: Refactoring with Magic Methods\n",
    "\n",
    "In this step, we will refactor the `Product` class to use magic methods for string representation, comparison, and other operations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Refactored Product Class\n",
    "\n",
    "We will add the `__str__`, `__gt__`, `__lt__`, `__contains__`, and `__add__` magic methods to the `Product` class."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Initializing the Product Class\n",
    "\n",
    "First, let's define the `Product` class with its constructor and basic attributes."
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "class Product:\n",
    "    def __init__(self, name, price, quantity):\n",
    "        if not name:\n",
    "            raise ValueError(\"Enter a name. This can't be empty.\")\n",
    "        self._name = name\n",
    "        self.price = price\n",
    "        self.quantity = quantity\n",
    "        self.active = True\n",
    "        self.promotion = None  # Add promotion instance variable\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adding Properties\n",
    "\n",
    "Next, we will add properties for `name`, `price`, and `quantity` to ensure proper encapsulation and validation."
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "class Product:\n",
    "    def __init__(self, name, price, quantity):\n",
    "        if not name:\n",
    "            raise ValueError(\"Enter a name. This can't be empty.\")\n",
    "        self._name = name\n",
    "        self.price = price\n",
    "        self.quantity = quantity\n",
    "        self.active = True\n",
    "        self.promotion = None  # Add promotion instance variable\n",
    "\n",
    "    @property\n",
    "    def name(self):\n",
    "        return self._name\n",
    "\n",
    "    @property\n",
    "    def price(self):\n",
    "        return self._price\n",
    "\n",
    "    @price.setter\n",
    "    def price(self, value):\n",
    "        if value < 0:\n",
    "\n",
    "    @property\n",
    "    def quantity(self):\n",
    "        return self._quantity\n",
    "\n",
    "    @quantity.setter\n",
    "    def quantity(self, value):\n",
    "        if value < 0:\n",
    "            raise ValueError(\"Quantity Error: What were you thinking?\")\n",
    "        self._quantity = value\n",
    "        if self._quantity == 0:\n",
    "            self.deactivate()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Adding Methods for Promotion and Activation\n",
    "\n",
    "We will add methods to set promotions, check if the product is active, and activate or deactivate the product."
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "class Product:\n",
    "    def __init__(self, name, price, quantity):\n",
    "        if not name:\n",
    "            raise ValueError(\"Enter a name. This can't be empty.\")\n",
    "        self._name = name\n",
    "        self.price = price\n",
    "        self.quantity = quantity\n",
    "        self.active = True\n",
    "        self.promotion = None  # Add promotion instance variable\n",
    "\n",
    "    @property\n",
    "    def name(self):\n",
    "        return self._name\n",
    "\n",
    "    @property\n",
    "    def price(self):\n",
    "        return self._price\n",
    "\n",
    "    @price.setter\n",
    "    def price(self, value):\n",
    "        if value < 0:\n",
    "            raise ValueError(\"Price cannot be negative.\")\n",
    "        self._price = value\n",
    "\n",
    "    @property\n",
    "    def quantity(self):\n",
    "        return self._quantity\n",
    "\n",
    "    @quantity.setter\n",
    "    def quantity(self, value):\n",
    "        if value < 0:\n",
    "            raise ValueError(\"Quantity Error: What were you thinking?\")\n",
    "        self._quantity = value\n",
    "        if self._quantity == 0:\n",
    "            self.deactivate()\n",
    "\n",
    "    def set_promotion(self, promotion):\n",
    "        self.promotion = promotion\n",
    "\n",
    "    def get_promotion(self):\n",
    "        return self.promotion\n",
    "\n",
    "    def is_active(self):\n",
    "        return self.active\n",
    "\n",
    "    def activate(self):\n",
    "        self.active = True\n",
    "\n",
    "    def deactivate(self):\n",
    "        self.active = False\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adding the \_\_str\_\_ Method\n",
    "\n",
    "The `__str__` method will provide a string representation of the product, including promotion information if available."
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "class Product:\n",
    "    def __init__(self, name, price, quantity):\n",
    "        if not name:\n",
    "            raise ValueError(\"Enter a name. This can't be empty.\")\n",
    "        self._name = name\n",
    "        self.price = price\n",
    "        self.quantity = quantity\n",
    "        self.active = True\n",
    "        self.promotion = None  # Add promotion instance variable\n",
    "\n",
    "    @property\n",
    "    def name(self):\n",
    "        return self._name\n",
    "\n",
    "    @property\n",
    "    def price(self):\n",
    "        return self._price\n",
    "\n",
    "    @price.setter\n",
    "    def price(self, value):\n",
    "        if value < 0:\n",
    "            raise ValueError(\"Price cannot be negative.\")\n",
    "        self._price = value\n",
    "\n",
    "    @property\n",
    "    def quantity(self):\n",
    "        return self._quantity\n",
    "\n",
    "    @quantity.setter\n",
    "    def quantity(self, value):\n",
    "        if value < 0:\n",
    "            raise ValueError(\"Quantity Error: What were you thinking?\")\n",
    "        self._quantity = value\n",
    "        if self._quantity == 0:\n",
    "            self.deactivate()\n",
    "\n",
    "    def set_promotion(self, promotion):\n",
    "        self.promotion = promotion\n",
    "\n",
    "    def get_promotion(self):\n",
    "        return self.promotion\n",
    "\n",
    "    def is_active(self):\n",
    "        return self.active\n",
    "\n",
    "    def activate(self):\n",
    "        self.active = True\n",
    "\n",
    "    def deactivate(self):\n",
    "        self.active = False\n",
    "\n",
    "    def __str__(self):\n",
    "        return f\"{self.name}, Price: ${self.price} Quantity:{self.quantity}{promotion_info}\"\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adding the buy Method\n",
    "\n",
    "The `buy` method will handle purchasing a product, adjusting the quantity, and applying any promotions."
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "class Product:\n",
    "    def __init__(self, name, price, quantity):\n",
    "        if not name:\n",
    "            raise ValueError(\"Enter a name. This can't be empty.\")\n",
    "        self._name = name\n",
    "        self.price = price\n",
    "        self.quantity = quantity\n",
    "        self.active = True\n",
    "        self.promotion = None  # Add promotion instance variable\n",
    "\n",
    "    @property\n",
    "    def name(self):\n",
    "        return self._name\n",
    "\n",
    "    @property\n",
    "    def price(self):\n",
    "        return self._price\n",
    "\n",
    "    @price.setter\n",
    "    def price(self, value):\n",
    "        if value < 0:\n",
    "            raise ValueError(\"Price cannot be negative.\")\n",
    "        self._price = value\n",
    "\n",
    "    @property\n",
    "    def quantity(self):\n",
    "        return self._quantity\n",
    "\n",
    "    @quantity.setter\n",
    "    def quantity(self, value):\n",
    "        if value < 0:\n",
    "            raise ValueError(\"Quantity Error: What were you thinking?\")\n",
    "        self._quantity = value\n",
    "        if self._quantity == 0:\n",
    "            self.deactivate()\n",
    "\n",
    "    def set_promotion(self, promotion):\n",
    "        self.promotion = promotion\n",
    "\n",
    "    def get_promotion(self):\n",
    "        return self.promotion\n",
    "\n",
    "    def is_active(self):\n",
    "        return self.active\n",
    "\n",
    "    def activate(self):\n",
    "        self.active = True\n",
    "\n",
    "    def deactivate(self):\n",
    "        self.active = False\n",
    "\n",
    "    def __str__(self):\n",
    "        promotion_info = f\", Promotion: {self.promotion.name}\" if self.promotion else \"\"\n",
    "        return f\"{self.name}, Price: ${self.price} Quantity:{self.quantity}{promotion_info}\"\n",
    "\n",
    "    def buy(self, quantity):\n",
    "        if quantity > self.quantity:\n",
    "            raise ValueError(f\"We do not have enough {self.name} in stock. Please order maximum {self.quantity} {self.name}\")\n",
    "        if quantity < 0:\n",
    "            raise ValueError(\"You cannot buy a negative quantity of a product.\")\n",
    "        if quantity == self.quantity:\n",
    "            self.active = False\n",
    "        self.quantity -= quantity\n",
    "        if self.promotion:\n",
    "            return self.promotion.apply_promotion(self, quantity)\n",
    "        return self.price * quantity\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adding Comparison Magic Methods\n",
    "\n",
    "We will add the `__gt__` and `__lt__` methods to compare product prices."
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "class Product:\n",
    "    def __init__(self, name, price, quantity):\n",
    "        if not name:\n",
    "            raise ValueError(\"Enter a name. This can't be empty.\")\n",
    "        self._name = name\n",
    "        self.price = price\n",
    "        self.quantity = quantity\n",
    "        self.active = True\n",
    "        self.promotion = None  # Add promotion instance variable\n",
    "\n",
    "    @property\n",
    "    def name(self):\n",
    "        return self._name\n",
    "\n",
    "    @property\n",
    "    def price(self):\n",
    "        return self._price\n",
    "\n",
    "    @price.setter\n",
    "    def price(self, value):\n",
    "        if value < 0:\n",
    "            raise ValueError(\"Price cannot be negative.\")\n",
    "        self._price = value\n",
    "\n",
    "    @property\n",
    "    def quantity(self):\n",
    "        return self._quantity\n",
    "\n",
    "    @quantity.setter\n",
    "    def quantity(self, value):\n",
    "        if value < 0:\n",
    "            raise ValueError(\"Quantity Error: What were you thinking?\")\n",
    "        self._quantity = value\n",
    "        if self._quantity == 0:\n",
    "            self.deactivate()\n",
    "\n",
    "    def set_promotion(self, promotion):\n",
    "        self.promotion = promotion\n",
    "\n",
    "    def get_promotion(self):\n",
    "        return self.promotion\n",
    "\n",
    "    def is_active(self):\n",
    "        return self.active\n",
    "\n",
    "    def activate(self):\n",
    "        self.active = True\n",
    "\n",
    "    def deactivate(self):\n",
    "        self.active = False\n",
    "\n",
    "    def __str__(self):\n",
    "        promotion_info = f\", Promotion: {self.promotion.name}\" if self.promotion else \"\"\n",
    "        return f\"{self.name}, Price: ${self.price} Quantity:{self.quantity}{promotion_info}\"\n",
    "\n",
    "    def buy(self, quantity):\n",
    "        if quantity > self.quantity:\n",
    "            raise ValueError(f\"We do not have enough {self.name} in stock. Please order maximum {self.quantity} {self.name}\")\n",
    "        if quantity < 0:\n",
    "            raise ValueError(\"You cannot buy a negative quantity of a product.\")\n",
    "        if quantity == self.quantity:\n",
    "            self.active = False\n",
    "        self.quantity -= quantity\n",
    "        if self.promotion:\n",
    "            return self.promotion.apply_promotion(self, quantity)\n",
    "        return self.price * quantity\n",
    "\n",
    "    def __gt__(self, other):\n",
    "        if not isinstance(other, Product):\n",
    "            return NotImplemented\n",
    "        return self.price > other.price\n",
    "\n",
    "    def __lt__(self, other):\n",
    "        if not isinstance(other, Product):\n",
    "            return NotImplemented\n",
    "        return self.price < other.price\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Testing the Refactored Product Class\n",
    "\n",
    "Let's create instances of the `Product` class and test the new magic methods."
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "# Create instances of Product\n",
    "mac = Product(\"MacBook Air M2\", price=1450, quantity=100)\n",
    "bose = Product(\"Bose QuietComfort Earbuds\", price=250, quantity=500)\n",
    "\n",
    "# Test __str__ method\n",
    "print(mac)  # Should print `MacBook Air M2, Price: $1450 Quantity:100`\n",
    "print(bose)  # Should print `Bose QuietComfort Earbuds, Price: $250 Quantity:500`\n",
    "\n",
    "# Test comparison methods\n",
    "print(mac > bose)  # Should print True\n",
    "print(mac < bose)  # Should print False\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}