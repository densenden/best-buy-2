{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Step 2: Abstract Classes for Promotions\n",
    "\n",
    "In this step, we will define the abstract `Promotion` class and its subclasses `PercentDiscount`, `SecondHalfPrice`, and `ThirdOneFree`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Promotion Class\n",
    "\n",
    "The `Promotion` class is an abstract base class that defines the interface for all promotions. Subclasses must implement the `apply_promotion` method."
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "from abc import ABC, abstractmethod\n",
    "\n",
    "class Promotion(ABC):\n",
    "    def __init__(self, name):\n",
    "        self.name = name\n",
    "\n",
    "    @abstractmethod\n",
    "    def apply_promotion(self, product, quantity):\n",
    "        pass\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## PercentDiscount Class\n",
    "\n",
    "The `PercentDiscount` class applies a percentage discount to the product price."
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "class PercentDiscount(Promotion):\n",
    "    def __init__(self, name, percent):\n",
    "        super().__init__(name)\n",
    "        self.percent = percent / 100\n",
    "\n",
    "    def apply_promotion(self, product, quantity):\n",
    "        return round(product.price * quantity * (1 - self.percent))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SecondHalfPrice Class\n",
    "\n",
    "The `SecondHalfPrice` class applies a discount where every second item is half price."
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "class SecondHalfPrice(Promotion):\n",
    "    def apply_promotion(self, product, quantity):\n",
    "        full_price_items = quantity // 2 + quantity % 2\n",
    "        half_price_items = quantity // 2\n",
    "        return product.price * full_price_items + (product.price * half_price_items * 0.5)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ThirdOneFree Class\n",
    "\n",
    "The `ThirdOneFree` class applies a discount where every third item is free."
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "class ThirdOneFree(Promotion):\n",
    "    def apply_promotion(self, product, quantity):\n",
    "        full_price_items = quantity - (quantity // 3)\n",
    "        return product.price * full_price_items\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Testing the Promotion Classes\n",
    "\n",
    "Let's create instances of each promotion class and test their functionality."
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "source": [
    "# Create instances of each promotion class\n",
    "percent_discount = PercentDiscount(\"30% off!\", 30)\n",
    "second_half_price = SecondHalfPrice(\"Second Half price!\")\n",
    "third_one_free = ThirdOneFree(\"Third One Free!\")\n",
    "\n",
    "# Create a product instance\n",
    "mac = Product(\"MacBook Air M2\", price=1450, quantity=100)\n",
    "\n",
    "# Test the promotions\n",
    "mac.set_promotion(percent_discount)\n",
    "print(mac.buy(1))  # Should return 1015\n",
    "\n",
    "mac.set_promotion(second_half_price)\n",
    "print(mac.buy(2))  # Should return 2175\n",
    "\n",
    "mac.set_promotion(third_one_free)\n",
    "print(mac.buy(3))  # Should return 2900\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}